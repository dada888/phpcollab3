<?php
/**
 * This file is part of the phpCollab3 package.
 * (c) 2009 Ideato s.r.l. <phpcollab@ideato.it>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * PluginIssueTable.class.php
 *
 * @package    phpCollab3
 * @subpackage idProjectManagmentPlugin Model
 */


/**
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    phpCollab3
 * @author Filippo (p16) De Santis <fd@ideato.it>
 * @subpackage idProjectManagmentPlugin Model
 */
class PluginIssueTable extends Doctrine_Table
{
  /**
   * Returns an issue and all it's related object given an issue id.
   *
   * @param integer $issue_id
   * @return Issue
   */
  public function getIssueById($issue_id)
  {
    $q = Doctrine_Query::create()
      ->from('Issue i')
      ->leftJoin('i.milestone m')
      ->leftJoin('i.project p')
      ->leftJoin('i.related_issue ri')
      ->leftJoin('i.status s')
      ->leftJoin('i.priority pr')
      ->leftJoin('i.tracker t')
      ->Where('i.id = ? ', $issue_id);

    return $q->fetchOne();
  }

  /**
   * Returns a Doctrine_Query object configured to contain the query to retrive all the issue of a milestone given the project id and the milestone id.
   *
   * @param int $project_id
   * @param int $milestone_id
   * @return Doctrine_Query
   */
  public function getQueryForMilstoneIssues($project_id = null, $milestone_id = null)
  {
    if (is_null($milestone_id) || is_null($project_id))
    {
      return null;
    }

    $q = $this->getQueryForProjectIssues($project_id);
    $q->addWhere('i.milestone_id = ?', $milestone_id)
      ->addOrderBy('i.id');
    return $q;
  }

  /**
   * Returns a Doctrine_Query object configured to contain the query for retriving all the issue of a specific project
   *
   * @param int $project_id
   * @return Doctrine_Query
   */
  public function getQueryForProjectIssues($project_id)
  {
    if (is_null($project_id))
    {
      return null;
    }

    $q = Doctrine_Query::create()
      ->from('Issue i')
      ->leftJoin('i.tracker t')
      ->andWhere('i.project_id = ? ', $project_id);

    return $q;
  }

  /**
   * Returns a Doctrine_Query ibject configured to contain the query to retrive all the issue of a user given the user profile id
   *
   * @param int $user_profile_id
   * @return Doctrine_Query
   */
  public function getQueryForUserIssues($user_profile_id)
  {
    if (is_null($user_profile_id))
    {
      return null;
    }

    $q = Doctrine_Query::create()
      ->from('Issue i')
      ->leftJoin('i.IssueUsers iu')
      ->leftJoin('i.status s')
      ->leftJoin('i.priority pr')
      ->leftJoin('i.milestone m')
      ->leftJoin('i.tracker t')
      ->where('iu.profile_id = ? ', $user_profile_id);

    return $q;
  }

  public function countByProject($project_id)
  {
    if (!is_null($q = $this->getQueryForProjectIssues($project_id)))
    {
      return $q->select('COUNT(*) as issues')
               ->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
    }
  }

  public function countByProjectWithEstimatedTime($project_id)
  {
    if (!is_null($q = $this->getQueryForProjectIssues($project_id)))
    {
      return $q->select('COUNT(*) as issues')
               ->addWhere('i.estimated_time IS NOT NULL')
               ->addWhere('i.estimated_time > 0')
               ->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
    }
  }

  protected function formatResultsNumberOfIssuePerTracker($results)
  {

    $trackers_and_issues = array();
    foreach ($results as $tracker_and_issue)
    {
      $trackers_and_issues[$tracker_and_issue[0]] = $tracker_and_issue[1];
    }
    return $trackers_and_issues;
  }

  public function countByTrackerOfProjectWithEstimatedTime($project_id)
  {
    if (!is_null($q = $this->getQueryForProjectIssues($project_id)))
    {
      $results = $q->select('t.name as tracker, COUNT(i.id) as issues')
                   ->addWhere('i.estimated_time IS NOT NULL')
                   ->addWhere('i.estimated_time > 0')
                   ->groupBy('tracker')
                   ->execute(array(), Doctrine::HYDRATE_NONE);

      return $this->formatResultsNumberOfIssuePerTracker($results);
    }
  }


  public function countByTrackerOfProjectWithoutEstimatedTime($project_id)
  {
    if (!is_null($q = $this->getQueryForProjectIssues($project_id)))
    {
      $results = $q->select('t.name as tracker, COUNT(i.id) as issues')
                   ->addWhere('(i.estimated_time IS NULL OR i.estimated_time = 0)')
                   ->groupBy('t.name')
                   ->execute(array(), Doctrine::HYDRATE_NONE);

      return $this->formatResultsNumberOfIssuePerTracker($results);
    }
  }

  public function retrieveEstimatedTimeForProject($project_id)
  {
    if (!is_null($q = $this->getQueryForProjectIssues($project_id)))
    {
      return $q->select('SUM(i.estimated_time) as estimated_time')
               ->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
    }
  }

  public function retrieveLogTimeForProject($project_id)
  {
    if (!is_null($q = $this->getQueryForProjectIssues($project_id)))
    {
      return $q->select('SUM(l.log_time) as project_log_times')
               ->leftJoin('i.logtimes l')
               ->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
    }
  }

  public function retrieveEstimatedTimeForProjectMilestone($project_id, $milestone_id)
  {
    if (!is_null($q = $this->getQueryForProjectIssues($project_id)))
    {
      return $q->select('SUM(i.estimated_time) as estimated_time')
               ->addWhere('i.milestone_id = ?', $milestone_id)
               ->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
    }
  }

}